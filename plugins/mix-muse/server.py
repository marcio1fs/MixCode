#!/usr/bin/env python3
"""
Mix Muse Server - FastAPI Backend
Servidor para o plugin Mix Muse que fornece APIs para an√°lise musical de c√≥digo
"""

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import List, Optional, Dict, Any
import uvicorn
from muse_agent import MuseAgent, MusicStyle, Complexity, suggest_names, analyze_naming_patterns

app = FastAPI(
    title="Mix Muse API",
    description="API para an√°lise musical de c√≥digo",
    version="1.0.0"
)

# Configurar CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Em produ√ß√£o, especificar dom√≠nios
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Modelos Pydantic
class SuggestRequest(BaseModel):
    code: str
    symbols: List[str]
    musicStyle: str = "jazz"
    tempo: int = 120
    complexity: str = "medium"

class AnalyzeRequest(BaseModel):
    code: str
    path: Optional[str] = None
    language: Optional[str] = None

class RealtimeRequest(BaseModel):
    code: str
    changes: List[Dict[str, Any]] = []
    symbols: List[str] = []

class MuseResponse(BaseModel):
    suggestions: List[str]
    musicalPattern: Optional[Dict[str, Any]] = None
    namingSuggestions: Optional[List[str]] = None

@app.get("/")
async def root():
    """Endpoint raiz"""
    return {
        "message": "Mix Muse API",
        "version": "1.0.0",
        "endpoints": [
            "/mixmuse/suggest",
            "/mixmuse/analyze", 
            "/mixmuse/analyze-realtime"
        ]
    }

@app.post("/mixmuse/suggest", response_model=MuseResponse)
async def suggest_improvements(request: SuggestRequest):
    """Sugere melhorias baseadas em an√°lise musical"""
    try:
        # Criar agente musical
        music_style = MusicStyle(request.musicStyle)
        complexity = Complexity(request.complexity)
        agent = MuseAgent(music_style, request.tempo, complexity)
        
        # Analisar c√≥digo
        analysis = agent.analyze_code(request.code)
        pattern = agent.generate_musical_pattern(analysis)
        
        # Gerar sugest√µes
        suggestions = []
        
        # Sugest√µes baseadas no padr√£o musical
        if analysis.complexity_score > 0.7:
            suggestions.append("Considere simplificar a estrutura do c√≥digo")
        
        if analysis.loops > 5:
            suggestions.append("Muitos loops detectados - considere usar m√©todos funcionais")
        
        if analysis.functions > 10:
            suggestions.append("Muitas fun√ß√µes - considere modularizar em classes")
        
        # Sugest√µes de nomenclatura
        naming_result = suggest_names(request.code, request.symbols)
        naming_suggestions = []
        
        if naming_result.get("suggestions"):
            # Extrair nomes das sugest√µes
            suggestions_text = naming_result["suggestions"]
            lines = suggestions_text.split('\n')
            for line in lines:
                if ' -> ' in line:
                    new_name = line.split(' -> ')[1].strip()
                    naming_suggestions.append(new_name)
        
        return MuseResponse(
            suggestions=suggestions,
            musicalPattern={
                "rhythm": pattern.rhythm,
                "harmony": pattern.harmony,
                "melody": pattern.melody,
                "structure": pattern.structure,
                "tempo": pattern.tempo,
                "key": pattern.key,
                "timeSignature": pattern.time_signature
            },
            namingSuggestions=naming_suggestions
        )
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erro na an√°lise: {str(e)}")

@app.post("/mixmuse/analyze", response_model=MuseResponse)
async def analyze_file(request: AnalyzeRequest):
    """An√°lise inicial de um arquivo"""
    try:
        # Criar agente musical
        agent = MuseAgent(MusicStyle.JAZZ, 120, Complexity.MEDIUM)
        
        # Analisar c√≥digo
        analysis = agent.analyze_code(request.code)
        pattern = agent.generate_musical_pattern(analysis)
        
        # Gerar sugest√µes iniciais
        suggestions = []
        
        if analysis.lines > 100:
            suggestions.append("Arquivo longo - considere dividir em m√≥dulos")
        
        if analysis.complexity_score > 0.6:
            suggestions.append("Complexidade alta - considere refatorar")
        
        if analysis.functions < 3:
            suggestions.append("Poucas fun√ß√µes - considere extrair l√≥gica")
        
        return MuseResponse(
            suggestions=suggestions,
            musicalPattern={
                "rhythm": pattern.rhythm,
                "harmony": pattern.harmony,
                "melody": pattern.melody,
                "structure": pattern.structure,
                "tempo": pattern.tempo,
                "key": pattern.key,
                "timeSignature": pattern.time_signature
            }
        )
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erro na an√°lise: {str(e)}")

@app.post("/mixmuse/analyze-realtime", response_model=MuseResponse)
async def analyze_realtime(request: RealtimeRequest):
    """An√°lise em tempo real durante edi√ß√£o"""
    try:
        # Criar agente musical
        agent = MuseAgent(MusicStyle.JAZZ, 120, Complexity.MEDIUM)
        
        # Analisar c√≥digo atual
        analysis = agent.analyze_code(request.code)
        pattern = agent.generate_musical_pattern(analysis)
        
        # Gerar sugest√µes em tempo real
        suggestions = []
        
        # Analisar mudan√ßas recentes
        if request.changes:
            for change in request.changes:
                if change.get("type") == "insert":
                    suggestions.append("Novo c√≥digo inserido - verifique a harmonia")
                elif change.get("type") == "delete":
                    suggestions.append("C√≥digo removido - ajuste a estrutura")
        
        # Verificar s√≠mbolos
        if request.symbols:
            naming_analysis = analyze_naming_patterns(request.code)
            if naming_analysis['total_functions'] > 0:
                suggestions.append("Considere renomear fun√ß√µes para nomes mais musicais")
        
        return MuseResponse(
            suggestions=suggestions,
            musicalPattern={
                "rhythm": pattern.rhythm,
                "harmony": pattern.harmony,
                "melody": pattern.melody,
                "structure": pattern.structure,
                "tempo": pattern.tempo,
                "key": pattern.key,
                "timeSignature": pattern.time_signature
            }
        )
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erro na an√°lise em tempo real: {str(e)}")

@app.get("/mixmuse/health")
async def health_check():
    """Verifica√ß√£o de sa√∫de da API"""
    return {
        "status": "healthy",
        "service": "Mix Muse API",
        "version": "1.0.0"
    }

@app.get("/mixmuse/styles")
async def get_music_styles():
    """Retorna estilos musicais dispon√≠veis"""
    return {
        "styles": [
            {"value": "jazz", "label": "Jazz", "description": "Improvisa√ß√£o e complexidade"},
            {"value": "classical", "label": "Classical", "description": "Estrutura formal"},
            {"value": "electronic", "label": "Electronic", "description": "Padr√µes sintetizados"},
            {"value": "rock", "label": "Rock", "description": "C√≥digo energ√©tico"},
            {"value": "ambient", "label": "Ambient", "description": "Fluxo livre"}
        ]
    }

@app.get("/mixmuse/complexities")
async def get_complexities():
    """Retorna n√≠veis de complexidade dispon√≠veis"""
    return {
        "complexities": [
            {"value": "simple", "label": "Simple", "description": "C√≥digo b√°sico"},
            {"value": "medium", "label": "Medium", "description": "C√≥digo moderado"},
            {"value": "complex", "label": "Complex", "description": "C√≥digo avan√ßado"}
        ]
    }

# Armazenamento simples em mem√≥ria para sugest√µes recentes
recent_suggestions = [
    {"original": "process_data", "new": "orchestrateData"},
    {"original": "calculate_sum", "new": "harmonizeValues"},
    {"original": "validate_input", "new": "tuneParameters"},
    {"original": "get_user", "new": "composeUser"},
    {"original": "save_data", "new": "arrangeData"},
    {"original": "check_status", "new": "tuneStatus"},
    {"original": "update_record", "new": "harmonizeRecord"},
    {"original": "delete_item", "new": "resolveItem"}
]

@app.get("/mixmuse/recent")
async def get_recent_suggestions():
    """Retorna sugest√µes recentes de nomes musicais"""
    return recent_suggestions

class RenameRequest(BaseModel):
    original: str
    newName: str

@app.post("/mixmuse/rename")
async def apply_rename(request: RenameRequest):
    """Simula aplica√ß√£o de renomea√ß√£o"""
    original = request.original
    new_name = request.newName
    
    # Aqui voc√™ pode implementar l√≥gica real de refatora√ß√£o
    print(f"üéµ Mix Muse: Renomeando {original} ‚Üí {new_name}")
    
    # Adicionar √† lista de sugest√µes recentes
    if {"original": original, "new": new_name} not in recent_suggestions:
        recent_suggestions.insert(0, {"original": original, "new": new_name})
        # Manter apenas as √∫ltimas 10 sugest√µes
        if len(recent_suggestions) > 10:
            recent_suggestions.pop()
    
    return {
        "status": "success", 
        "message": f"Renomeado {original} ‚Üí {new_name}",
        "original": original, 
        "new": new_name
    }

@app.get("/mixmuse/suggestions/count")
async def get_suggestions_count():
    """Retorna o n√∫mero de sugest√µes dispon√≠veis"""
    return {
        "count": len(recent_suggestions),
        "total_suggestions": len(recent_suggestions)
    }

if __name__ == "__main__":
    uvicorn.run(
        "server:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    ) 